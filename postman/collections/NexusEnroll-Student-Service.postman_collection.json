{
	"info": {
		"_postman_id": "student-service-collection",
		"name": "NexusEnroll - Student Service",
		"description": "Postman collection for testing the Student Service microservice (port 8081). Handles student enrollment and drop operations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Service is healthy\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql('healthy');",
							"    pm.expect(jsonData.service).to.eql('student');",
							"    pm.expect(jsonData.port).to.eql(8081);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/health",
					"host": ["{{baseUrl}}"],
					"path": ["health"]
				},
				"description": "Health check endpoint to verify the Student Service is running"
			},
			"response": []
		},
		{
			"name": "Enroll Student in Course",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for successful enrollment\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Enrollment response is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData).to.have.property('message');",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Enrollment successful\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData.success).to.be.true;",
							"        pm.expect(jsonData.message).to.include('enrolled');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"courseId\": \"{{courseId}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/students/{{studentId}}/enrollments",
					"host": ["{{baseUrl}}"],
					"path": ["students", "{{studentId}}", "enrollments"]
				},
				"description": "Enroll a student in a specific course. Validates prerequisites, capacity, and time conflicts."
			},
			"response": [
				{
					"name": "Successful Enrollment",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": \"CS201\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/students/S001/enrollments",
							"host": ["{{baseUrl}}"],
							"path": ["students", "S001", "enrollments"]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": true,\n    \"message\": \"Student S001 enrolled in CS201\"\n}"
				}
			]
		},
		{
			"name": "Drop Student from Course",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for successful drop\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Drop response is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData).to.have.property('message');",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Drop successful\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData.success).to.be.true;",
							"        pm.expect(jsonData.message).to.include('dropped');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/students/{{studentId}}/enrollments/{{courseId}}",
					"host": ["{{baseUrl}}"],
					"path": ["students", "{{studentId}}", "enrollments", "{{courseId}}"]
				},
				"description": "Drop a student from a specific course"
			},
			"response": [
				{
					"name": "Successful Drop",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/students/S001/enrollments/CS201",
							"host": ["{{baseUrl}}"],
							"path": ["students", "S001", "enrollments", "CS201"]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": true,\n    \"message\": \"Student S001 dropped from CS201\"\n}"
				}
			]
		},
		{
			"name": "Test Data Setup",
			"item": [
				{
					"name": "Enroll Alice (S001) in CS201",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": \"CS201\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/students/S001/enrollments",
							"host": ["{{baseUrl}}"],
							"path": ["students", "S001", "enrollments"]
						}
					}
				},
				{
					"name": "Enroll Bob (S002) in CS201",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": \"CS201\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/students/S002/enrollments",
							"host": ["{{baseUrl}}"],
							"path": ["students", "S002", "enrollments"]
						}
					}
				},
				{
					"name": "Enroll Alice (S001) in BUS101",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": \"BUS101\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/students/S001/enrollments",
							"host": ["{{baseUrl}}"],
							"path": ["students", "S001", "enrollments"]
						}
					}
				}
			]
		},
		{
			"name": "Error Scenarios",
			"item": [
				{
					"name": "Student Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message contains 'Student not found'\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Student not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": \"CS201\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/students/S999/enrollments",
							"host": ["{{baseUrl}}"],
							"path": ["students", "S999", "enrollments"]
						}
					}
				},
				{
					"name": "Course Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message contains 'Course not found'\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Course not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": \"CS999\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/students/S001/enrollments",
							"host": ["{{baseUrl}}"],
							"path": ["students", "S001", "enrollments"]
						}
					}
				},
				{
					"name": "Invalid Request Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message contains 'Missing courseId'\", function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText).to.include('Missing courseId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"invalid\": \"data\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/students/S001/enrollments",
							"host": ["{{baseUrl}}"],
							"path": ["students", "S001", "enrollments"]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default environment variables if not set",
					"if (!pm.environment.get(\"baseUrl\")) {",
					"    pm.environment.set(\"baseUrl\", \"http://localhost:8081\");",
					"}",
					"if (!pm.environment.get(\"studentId\")) {",
					"    pm.environment.set(\"studentId\", \"S001\");",
					"}",
					"if (!pm.environment.get(\"courseId\")) {",
					"    pm.environment.set(\"courseId\", \"CS201\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global tests for all requests",
					"pm.test(\"Response time is less than 2000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
					"    pm.test(\"Response is valid JSON\", function () {",
					"        pm.response.to.be.json;",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "studentId",
			"value": "S001",
			"type": "string"
		},
		{
			"key": "courseId",
			"value": "CS201",
			"type": "string"
		}
	]
}