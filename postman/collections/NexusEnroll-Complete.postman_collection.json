{
	"info": {
		"_postman_id": "nexus-enroll-complete",
		"name": "NexusEnroll - Complete Microservices",
		"description": "Comprehensive test collection for all NexusEnroll microservices including Student Service, Faculty Service, and Admin Service. This collection includes positive and negative test scenarios with automated validation.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Checks",
			"item": [
				{
					"name": "Student Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"    pm.expect(jsonData.service).to.eql('student');",
									"    pm.expect(jsonData.port).to.eql(8081);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						}
					},
					"response": []
				},
				{
					"name": "Faculty Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"    pm.expect(jsonData.service).to.eql('faculty');",
									"    pm.expect(jsonData.port).to.eql(8082);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{facultyUrl}}/health",
							"host": ["{{facultyUrl}}"],
							"path": ["health"]
						}
					},
					"response": []
				},
				{
					"name": "Admin Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"    pm.expect(jsonData.service).to.eql('admin');",
									"    pm.expect(jsonData.port).to.eql(8083);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{adminUrl}}/health",
							"host": ["{{adminUrl}}"],
							"path": ["health"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Student Service",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "Enroll Alice in CS201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Enrollment successful\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('enrolled');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"courseId\": \"CS201\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/students/S001/enrollments",
									"host": ["{{baseUrl}}"],
									"path": ["students", "S001", "enrollments"]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Bob in CS201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Enrollment successful\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('enrolled');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"courseId\": \"CS201\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/students/S002/enrollments",
									"host": ["{{baseUrl}}"],
									"path": ["students", "S002", "enrollments"]
								}
							},
							"response": []
						},
						{
							"name": "Enroll Alice in BUS101",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Enrollment successful\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('enrolled');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"courseId\": \"BUS101\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/students/S001/enrollments",
									"host": ["{{baseUrl}}"],
									"path": ["students", "S001", "enrollments"]
								}
							},
							"response": []
						},
						{
							"name": "Drop Alice from CS201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Drop successful\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('dropped');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/students/S001/enrollments/CS201",
									"host": ["{{baseUrl}}"],
									"path": ["students", "S001", "enrollments", "CS201"]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "Enroll Non-existent Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for student not found\", function () {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).to.include('Student not found');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"courseId\": \"CS201\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/students/S999/enrollments",
									"host": ["{{baseUrl}}"],
									"path": ["students", "S999", "enrollments"]
								}
							},
							"response": []
						},
						{
							"name": "Enroll in Non-existent Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for course not found\", function () {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).to.include('Course not found');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"courseId\": \"CS999\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/students/S001/enrollments",
									"host": ["{{baseUrl}}"],
									"path": ["students", "S001", "enrollments"]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for missing courseId\", function () {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).to.include('Missing courseId');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"invalid\": \"data\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/students/S001/enrollments",
									"host": ["{{baseUrl}}"],
									"path": ["students", "S001", "enrollments"]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Faculty Service",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "View CS201 Roster",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Roster data is valid\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('courseId');",
											"    pm.expect(jsonData).to.have.property('courseName');",
											"    pm.expect(jsonData).to.have.property('students');",
											"    pm.expect(jsonData.courseId).to.eql('CS201');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{facultyUrl}}/courses/CS201/roster",
									"host": ["{{facultyUrl}}"],
									"path": ["courses", "CS201", "roster"]
								}
							},
							"response": []
						},
						{
							"name": "Submit Grade A for Alice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Grade submission successful\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('Grade A submitted');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"studentId\": \"S001\",\n    \"grade\": \"A\"\n}"
								},
								"url": {
									"raw": "{{facultyUrl}}/courses/CS201/grades",
									"host": ["{{facultyUrl}}"],
									"path": ["courses", "CS201", "grades"]
								}
							},
							"response": []
						},
						{
							"name": "Submit Grade B for Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Grade submission successful\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('Grade B submitted');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"studentId\": \"S002\",\n    \"grade\": \"B\"\n}"
								},
								"url": {
									"raw": "{{facultyUrl}}/courses/CS201/grades",
									"host": ["{{facultyUrl}}"],
									"path": ["courses", "CS201", "grades"]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "View Non-existent Course Roster",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for course not found\", function () {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).to.include('Course not found');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{facultyUrl}}/courses/CS999/roster",
									"host": ["{{facultyUrl}}"],
									"path": ["courses", "CS999", "roster"]
								}
							},
							"response": []
						},
						{
							"name": "Submit Invalid Grade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error message for invalid grade\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.false;",
											"    pm.expect(jsonData.message).to.include('Invalid grade letter');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"studentId\": \"S001\",\n    \"grade\": \"X\"\n}"
								},
								"url": {
									"raw": "{{facultyUrl}}/courses/CS201/grades",
									"host": ["{{facultyUrl}}"],
									"path": ["courses", "CS201", "grades"]
								}
							},
							"response": []
						},
						{
							"name": "Submit Grade for Non-existent Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for student not found\", function () {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).to.include('Student not found');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"studentId\": \"S999\",\n    \"grade\": \"A\"\n}"
								},
								"url": {
									"raw": "{{facultyUrl}}/courses/CS201/grades",
									"host": ["{{facultyUrl}}"],
									"path": ["courses", "CS201", "grades"]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin Service",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "Generate Enrollment Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Report data is valid\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('report');",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.report).to.eql('enrollment');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{adminUrl}}/admin/reports/enrollments",
									"host": ["{{adminUrl}}"],
									"path": ["admin", "reports", "enrollments"]
								}
							},
							"response": []
						},
						{
							"name": "Force Add Student to Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Force add successful\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"    pm.expect(jsonData.message).to.include('force-added');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{adminUrl}}/admin/courses/BUS101/students/S002",
									"host": ["{{adminUrl}}"],
									"path": ["admin", "courses", "BUS101", "students", "S002"]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "Force Add Non-existent Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for student not found\", function () {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).to.include('Student not found');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{adminUrl}}/admin/courses/BUS101/students/S999",
									"host": ["{{adminUrl}}"],
									"path": ["admin", "courses", "BUS101", "students", "S999"]
								}
							},
							"response": []
						},
						{
							"name": "Force Add to Non-existent Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error message for course not found\", function () {",
											"    const responseText = pm.response.text();",
											"    pm.expect(responseText).to.include('Course not found');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{adminUrl}}/admin/courses/CS999/students/S001",
									"host": ["{{adminUrl}}"],
									"path": ["admin", "courses", "CS999", "students", "S001"]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Integration Workflows",
			"item": [
				{
					"name": "Complete Enrollment Workflow",
					"item": [
						{
							"name": "1. Enroll Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Enrollment successful\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"courseId\": \"CS201\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/students/S001/enrollments",
									"host": ["{{baseUrl}}"],
									"path": ["students", "S001", "enrollments"]
								}
							},
							"response": []
						},
						{
							"name": "2. View Updated Roster",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Roster includes enrolled student\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    const studentIds = jsonData.students.map(s => s.id);",
											"    pm.expect(studentIds).to.include('S001');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{facultyUrl}}/courses/CS201/roster",
									"host": ["{{facultyUrl}}"],
									"path": ["courses", "CS201", "roster"]
								}
							},
							"response": []
						},
						{
							"name": "3. Submit Grade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Grade submission successful\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.success).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"studentId\": \"S001\",\n    \"grade\": \"A\"\n}"
								},
								"url": {
									"raw": "{{facultyUrl}}/courses/CS201/grades",
									"host": ["{{facultyUrl}}"],
									"path": ["courses", "CS201", "grades"]
								}
							},
							"response": []
						},
						{
							"name": "4. Generate Report",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Report generated successfully\", function () {",
											"    pm.response.to.have.status(200);",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.report).to.eql('enrollment');",
											"    pm.expect(jsonData.data.length).to.be.greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{adminUrl}}/admin/reports/enrollments",
									"host": ["{{adminUrl}}"],
									"path": ["admin", "reports", "enrollments"]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set up common variables if not already set",
					"if (!pm.environment.get(\"baseUrl\")) {",
					"    pm.environment.set(\"baseUrl\", \"http://localhost:8081\");",
					"}",
					"if (!pm.environment.get(\"facultyUrl\")) {",
					"    pm.environment.set(\"facultyUrl\", \"http://localhost:8082\");",
					"}",
					"if (!pm.environment.get(\"adminUrl\")) {",
					"    pm.environment.set(\"adminUrl\", \"http://localhost:8083\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Common response time check",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Check for valid JSON response",
					"if (pm.response.headers.get('Content-Type').includes('application/json')) {",
					"    pm.test(\"Response is valid JSON\", function () {",
					"        pm.response.to.be.json;",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"key": "facultyUrl",
			"value": "http://localhost:8082",
			"type": "string"
		},
		{
			"key": "adminUrl",
			"value": "http://localhost:8083",
			"type": "string"
		}
	]
}